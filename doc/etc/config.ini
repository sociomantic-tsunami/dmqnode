# Distributed Message Queue (DMQ) node configuration
#
# The DMQ node is a server implementing one node for a network message queue.
# One or a cluster of multiple independent DMQ nodes form the DMQ. DMQ clients
# communicate with DMQ nodes using the "dmqproto" protocol.
#
# Copyright (c) dunnhumby Germany GmbH. All rights reserved
# david.eckardt@sociomantic.com


# Server configuration. During the transition from legacy to Neo swarm the DMQ
# node supports both protocols on separate ports.
#
# address               Server IP address.
# port                  Server TCP port, for the legacy protocol.
# neoport               Server TCP port, for the Neo protocol.
# data_dir              The directory where the memory dump and disk overflow
#                       files are stored. It should be relative to the current
#                       working directory of the dmqnode process. Optional, by
#                       default `data`.
# channel_size_limit    The size for each memory queue.
# cpu                   (Optional, by default -1.) The CPU on which to run the
#                       process. 0 is the first CPU. -1 does not specify a
#                       particular CPU.
# unix_socket_path      The path of the UNIX domain server socket.

[Server]
address                 = # address
port                    = # port for the incoming connections on legacy protocol
neoport                 = # port for the incoming connections on the neo protocol
data_dir                = data
channel_size_limit      = 2000000000
cpu                     = -1
unix_socket_path        = dmqnode.socket

# Channel sizes by ID (optional).
#
# Overrides [Server]->channel_size_limit for channels with specific IDs (channel
# names). The value specifies the channel size (in bytes) for each channel whose
# ID/channel name starts with the key.

[ChannelSizeById]
admedia = 400000000

# Node performance configuration (optional).
#
# write_flush_ms        (Optional, by default 250.) Specifies the period for
#                       periodic flushing of the output in milliseconds.
# no_delay              (Optional, by default false.) Specifies the TCP_NODELAY
#                       option for Neo connections: `false` enables, `true`
#                       disables Nagle's algorithm.

[Performance]
write_flush_ms          = 250
no_delay                = false

# Disk overflow configuration (optional).
#
# write_index_ms        (Optional, by default 60000.) Specifies the period for
#                       periodic committing of the disk overflow data and index
#                       file in milliseconds.

[Overflow]
write_index_ms = 60000

# Stats logging Configuration (optional).
#
# console_stats_enabled (Optional, by default false.) `false` disables, `true`
#                       enables outputting DMQ channel throughput statistics to
#                       the console.

[Stats]
console_stats_enabled   = true

# PID lockfile configuration (optional). If configured, a PID lock file will be
# written, when the application starts up. If a file at this location is already
# locked by another process, the application will fail to start.
#
# path                  The path of the lockfile.

[PidLock]
path                    = dmqnode.pid

# Logger configuration
#
# level       deepest logger level to output (error, warn, info, trace)
# propagate   whether to propagate these settings to child loggers (false, true)
# console     whether to output logging info to the console (false, true)
# file        path of file to write logging info to

[LOG.Root]
level                   = trace
propagate               = true
console                 = true
file                    = log/root.log


